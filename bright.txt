// ==PREPROCESSOR==
// @version "v1.4"
// @feature "watch-metadb"
// @feature "dragdrop"
// @import "E:\GitHub\Foobar2000-Bright\import\common\common5.js"
// ==/PREPROCESSOR==

var time111 = (new Date()).getTime();
var time222 = time111;

var repaint_f1 = false,
    repaint_f2 = false,
    repaint_f = false;
var repaint_main1 = false,
    repaint_main2 = false,
    repaint_main = false;

var ww = 0,
    wh = 0;

var header_height = 115;


var prop, plst, toolbar;
var images = {};
var toolbar_height = 43;
var toolbar_width = 50;






//////////////////////////////////////////////////////////////////////////////

prop = new function() {

    this.Panel = {
        smoothScroll: window.GetProperty("Panel.smoothScroll", true),
        refreshInterval: window.GetProperty("Panel.refreshInterval", 30),
        tooltip: false, // not prepared
        vimStyle: true, // vim style keyboard shortcuts.
        customColor: true,
        customFonts: true,
    };

    this.Style = {
        colorScheme: window.GetProperty("Style.colorScheme", "white"),
        fontName: window.GetProperty("Style.fontName", "segoe ui"),
        fontSize: window.GetProperty("Style.fontSize", 14),
    };

    this.PLST = {
        groupBy: window.GetProperty("PLST.groupBy", 0),
        autoCollapse: window.GetProperty("PLST.autoCollapse", false),
        rowHeight: window.GetProperty("PLST.rowHeight", 35),
        scrollStep: 3,
        enableMood: window.GetProperty("PLST.enableMood", true),
        moodMode: window.GetProperty("PLST.moodMode", 1),
    };

    this.Color = {};

    this.Font = {};


}();


function getColor() {
    // 基本颜色
    prop.Color = {
        txt: eval(window.GetProperty("Color.Text", "RGB(0, 0, 0)")),
        bg: eval(window.GetProperty("Color.Bg", "RGB(255, 255, 255)")),
        bgSel: eval(window.GetProperty("Color.Bg_Sel", "RGB(66, 133, 244)"))
    };
    // 计算选中文字颜色
    if (Luminance(prop.Color.bgSel) > 0.6) {
        prop.Color.txtSel = RGB(0, 0, 0);
    } else {
        prop.Color.txtSel = RGB(255, 255, 255);
    }
    // 其它颜色
}

function getFont() {

    prop.Font.list = gdi.Font(prop.Style.fontName, prop.Style.fontSize);
    prop.Font.list2 = gdi.Font(prop.Style.fontName, prop.Style.fontSize - 2);
    prop.Font.tab = gdi.Font(prop.Style.fontName, 14);
    prop.Font.header1 = gdi.Font(prop.Style.fontName, 30);

    if (utils.CheckFont("segoe mdl2 assets")) {
        prop.Font.mdl2 = gdi.Font("segoe mdl2 assets", prop.Style.fontSize - 2);
    } else if (true) {
        // user defined font collection
    }
}


plst = new function() {

    var __this__ = this;
    var list_dr = [];
    var list = plman.GetPlaylistItems(-1);
    var tf_string = fb.TitleFormat("%album artist%^^%album%^^%discnumber%" +
            "^^[$num(%tracknumber%,2)]^^%title%^^[%artist%]^^$if2(%rating%,0)^^%length%");

    var research = false,
    research_k = 0;
    var research_count = 0;
    var scroll = 0,
    scroll_ = 0,
    scroll__ = 0,
    scroll___ = 0;


    this.showNowPlaying = false;

    this.repaint = function() {

        repaint_main1 = repaint_main2;

    }

    this.getList = function(start, compare, force) {

        var Time = fb.CreateProfiler();

        if (start == null) {
            scroll = 0;
            start = 0;
            list_dr = [];
            list = plman.GetPlaylistItems(plman.ActivePlaylist);
        };

        var temp = "",
        metadb;
        var k = start,
        total = list.Count;
        while (k < total) {
            metadb = list.Item(k);
            temp = tf_string.EvalWithMetadb(metadb).split("^^");
            list_dr.push({
                metadb: metadb,
                string: temp,
            });
            k++;
            if (!force && Time.Time > 30) {
                research = true;
                research_k = k;
                research_count++;
                return;
            }
        }

        this.repaint();
        research_count = 0;
        plman.SetActivePlaylistContext();

    }

    var time_dl,
    time_s = fb.CreateProfiler();

    this.onTimer = function() {
        time_dl = time_s.Time;
        time_s.Reset();
        // Research
        if (research) {
            research = false;
            this.getList(research_k, "");
            return false;
        }

        // Show now playing
        if (this.showNowPlaying) {
            if (plman.PlayingPlaylist == plman.ActivePlaylist) {
                try {
                    var playingIdx = plman.GetPlayingItemLocation().PlaylistItemIndex;
                    if (playingIdx >= 0) {
                        scroll = playingIdx * this.rowHeight - this.h / 2 + this.rowHeight;
                        plman.ClearPlaylistSelection(this.activeList);
                        plman.SetPlaylistSelectionSingle(this.activeList, playingIdx, true);
                        plman.SetPlaylistFocusItem(this.activeList, playingIdx);
                    }
                } catch (e) {
                    fb.trace(e);
                }
            }
            this.showNowPlaying = false;
        }

        // Check scroll
        scroll = this.checkScroll(scroll);

        if (Math.abs(scroll - scroll_) > 0.5) {
            if (prop.Panel.smoothScroll) {
                //scroll___ += (scroll - scroll___) * (1 - Math.pow(0.9, time_dl / 4));
                //scroll__ += (scroll___ - scroll__) * (1 - Math.pow(0, 9, time_dl / 4));
                //scroll_ += (scroll__ - scroll_) * (1 - Math.pow(0, 9, time_dl / 4));
                scroll__ += (scroll - scroll__) / 3;
                scroll_ += (scroll__ - scroll_) / 3;
            } else {
                scroll_ = scroll;
            }
            time_s.Reset();
            return true;
        }

        return false;
    }

    this.checkScroll = function(scroll___) {
        scroll___ = Math.round(scroll___ / this.rowHeight) * this.rowHeight;
        if (scroll___ > (this.totalHeight - this.h + this.rowHeight))
            scroll___ = Math.round((this.totalHeight - this.h + this.rowHeight) / this.rowHeight - 0.5) * this.rowHeight;
        if (this.totalHeight < this.h || scroll___ < 0)
            scroll___ = 0;
        return scroll___;
    }

    this.totalHeight = 0;
    this.hasScrollbar = false;
    this.rowHeight = prop.PLST.rowHeight;

    this.setSize = function(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }

    this.getPlayingIdx = function(a, b) {
        try {
            var playingItem = plman.GetPlayingItemLocation();
            var playingIdx = -1;
            if (playingItem.IsValid && playingItem.PlaylistIndex == plman.ActivePlaylist) {
                playingIdx = playingItem.PlaylistItemIndex;
            }
            for (var i = a; i < b; i++) {
                if (playingIdx == i)
                    break;
            }
            return playingIdx;
        } catch (e) {};
        return -1;
    }

    this.draw = function(gr, font, color) {

        // do not draw bg here

        if (list_dr.length > 0) {

            this.totalHeight = list_dr.length * this.rowHeight;
            this.hasScrollbar = this.totalHeight > this.h;

            var start_ = 0,
            end_ = 0;
            var ry, rx = this.x + 10,
            rw = this.w - 20 - (this.hasScrollbar ? 10 : 0);
            var isSelected, isFocused, isPlaying;

            start_ = Math.round(scroll_ / this.rowHeight + 0.4);
            end_ = Math.round((scroll_ + this.h) / this.rowHeight - 0.5);
            end_ = (list_dr.length < end_) ? list_dr.length : end_;


            for (var i = start_; i < end_; i++) {
                // calc row y;
                ry = this.y + this.rowHeight * i - scroll_;

                isSelected = plman.IsPlaylistItemSelected(this.activeList, i);
                isFocused = this.focusIdx == i;


                isSelected &&
                    gr.FillSolidRect(rx, ry, rw, this.rowHeight, prop.Color.bgSel);

                // Odd/Even
                gr.FillSolidRect(rx, ry, rw, this.rowHeight, i % 2 ? 0x09ffffff : 0x09000000);

                isFocused &&
                    gr.DrawRect(rx+1, ry+1, rw-3, this.rowHeight - 3, 1, RGB(127, 127, 127));

                var colorText = prop.Color.txt;
                if (isSelected) {
                    colorText = prop.Color.txtSel;
                } else if (isPlaying) {
                    colorText = prop.Color.bgSel;
                }
                var colorText2 = blendColors(colorText, prop.Color.bg, 0.3);
                var leftPad = rx + 15;
                var rightPad = 15;
                // Tracknumber
                var numW = gr.CalcTextWidth("00", prop.Font.list) + 10;
                gr.GdiDrawText(list_dr[i].string[3], prop.Font.list, colorText, leftPad, ry, numW, this.rowHeight, DT_CENTER | DT_VCENTER | DT_CALCRECT);
                leftPad += numW + 10;
                // Mood
                if (prop.PLST.enableMood) {
                    var moodW = gr.CalcTextWidth("\ue006", prop.Font.mdl2) + 1;
                    gr.GdiDrawText("\ue006", prop.Font.mdl2, colorText, rx + rw - rightPad - moodW, ry, moodW, this.rowHeight, DT_CENTER | DT_VCENTER | DT_CALCRECT);
                    rightPad = moodW + rightPad + 15;
                }
                // Duration
                gr.GdiDrawText(list_dr[i].string[7], prop.Font.list2, colorText2, rx + rw - rightPad - 50, ry, 50, this.rowHeight, DT_CENTER | DT_VCENTER | DT_CALCRECT);
                rightPad += 50;

                if (this.w >= 625 && this.w < 1000) {
                    gr.GdiDrawText(list_dr[i].string[5], prop.Font.list2, colorText2,
                            leftPad + (rw - leftPad - rightPad) * 0.6, ry, (rw - leftPad - rightPad) * 0.4, this.rowHeight, DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS | DT_NOPREFIX);
                    rightPad += (rw - leftPad - rightPad) * 0.4 + 10;
                } else if (ww >= 1000) {
                    var albW = (rw - leftPad - rightPad) * 0.35;
                    gr.GdiDrawText(list_dr[i].string[1], prop.Font.list2, colorText2,
                            rx + rw - rightPad - albW, ry, albW, this.rowHeight, DT_VCENTER | DT_END_ELLIPSIS | DT_CALCRECT | DT_NOPREFIX);
                    rightPad += albW + 10;
                    //
                    var artW = albW / 0.35 * 0.25;
                    gr.GdiDrawText(list_dr[i].string[5], prop.Font.list2, colorText2,
                            rx + rw - rightPad - artW, ry, artW, this.rowHeight, DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS | DT_NOPREFIX);
                    rightPad += artW + 10;
                }

                // Title
                gr.GdiDrawText(list_dr[i].string[4], prop.Font.list, colorText,
                        leftPad, ry, rw - leftPad - rightPad, this.rowHeight, DT_VCENTER | DT_CALCRECT | DT_END_ELLIPSIS | DT_NOPREFIX);

            }

            // drag split line

            (this.splitY > -1) &&
                gr.FillSolidRect(rx, this.splitY-1, rw, 2, RGB(127, 127, 127));


            // Scrollbar
            var cursorY, cursorH;
            if (this.h < this.totalHeight) {
                cursorH = Math.round(this.h / this.totalHeight * this.h);
                cursorH = (cursorH < 25 ? 25 : cursorH);
                cursorY = this.y + Math.round((this.h - cursorH) * scroll_ / (this.totalHeight - this.h));
                gr.FillSolidRect(ww - 9, cursorY, 8, cursorH, prop.Color.txt & 0x33ffffff);
            }

        } else {

            gr.GdiDrawText("空列表", prop.Font.header1, blendColors(prop.Color.txt, prop.Color.bg, 0.5), 
                    this.x + 30, this.y+20, this.w - 60, this.h - 40, 0);


        }

    }

    this.activeList = plman.ActivePlaylist;
    this.focusIdx = plman.GetPlaylistFocusItemIndex(this.activeList);
    this.ShiftStartIdx = -1;

    this.onMouseWheel = function(step) {
        scroll -= step * this.rowHeight * 3;
    };

    this.selectRange = function(from, to) {
        var indexes = [];
        if (from > to) {
            var c = from;
            from = to;
            to = c;
        }
        for (var i = from; i <= to; i++) {
            indexes.push(i);
        }
        plman.ClearPlaylistSelection(this.activeList);
        plman.SetPlaylistSelection(this.activeList, indexes, true);
    }


    var oldIdx = -1;
    var actionNotAllowed = false;

    this.rowDrag = false;
    this.fileDrag = false;
    this.dragOverIdx = -1;
    this.clickOnSelection = false;


    this.onMouse = function (event, x, y, mask) {
        var holdShift = utils.IsKeyPressed(VK_SHIFT);
        var holdControl = utils.IsKeyPressed(VK_CONTROL);
        var isOverList = (x > this.x && x < this.x + this.w 
                - (this.hasScrollbar ? 10 : 0) 
                && y > this.y && y < this.y + this.h);
        var isOverScrollbar = this.hasScrollbar && (x > this.x + this.w - 10 &&
                x < this.x + this.w && y > this.y && y < this.y + this.h);
        var thisIdx;

        // get hovered/active row index.
        
        if (isOverList) {
            thisIdx = Math.round((y + scroll - this.y) / this.rowHeight - 0.5);
            if (thisIdx >= list_dr.length)
                thisIdx = list_dr.length;
        } else {
            thisIdx = -1;
        }

        switch (event) {
            case "down":
                // clear sel if click on empty line
                if (thisIdx == list_dr.length) {
                    if (!holdShift && holdControl) {
                        plman.ClearPlaylistSelection(this.activeList);
                        this.SelStart = -1;
                        return;
                    }
                } else if (thisIdx != -1) {
                    // click on list items
                    if (holdShift) {
                        if (this.focusIdx != thisIdx && plman.IsPlaylistItemSelected(this.activeList, this.focusIdx)) {
                            if (this.SelStart > -1) {
                                this.selectRange(this.SelStart, thisIdx);
                            } else {
                                this.selectRange(this.focusIdx, thisIdx);
                            }
                        } else {
                            plman.SetPlaylistSelectionSingle(this.activeList, thisIdx, true);
                            this.SelStart = thisIdx;
                        }
                        plman.SetPlaylistFocusItem(this.activeList, thisIdx);
                        this.focusIdx = thisIdx;
                    } else if (holdControl) {
                        if (plman.IsPlaylistItemSelected(this.activeList, thisIdx)) {
                            plman.SetPlaylistSelectionSingle(this.activeList, thisIdx, false);
                        } else {
                            plman.SetPlaylistSelectionSingle(this.activeList, thisIdx, true);
                            plman.SetPlaylistFocusItem(this.activeList, thisIdx);
                            this.focusIdx = thisIdx;
                        }
                        this.SelStart = thisIdx;
                    } else {
                        if (plman.IsPlaylistItemSelected(this.activeList, thisIdx)) {
                            this.clickOnSelection = true;
                            this.dragX = x;
                            this.dragY = y;
                        } else {
                            this.clickOnSelection = false;
                            plman.ClearPlaylistSelection(this.activeList);
                            plman.SetPlaylistSelectionSingle(this.activeList, thisIdx, true);
                        }
                        plman.SetPlaylistFocusItem(this.activeList, thisIdx);
                        this.focusIdx = thisIdx;
                        this.SelStart = thisIdx;
                    }
                    this.repaint();
                }
                break;
            case "dblclk":
                if (isOverScrollbar) {
                    // ...
                } else if (thisIdx > -1 && thisIdx < list_dr.length) {

                     // ... rating ...
                     // TODO: maybe rating/unrating on single left click

                    plman.ExecutePlaylistDefaultAction(this.activeList, thisIdx);
                    this.repaint();
                }
                break;
            case "move":
                // ... scrollbar ...
                
                var tempY = this.splitY;
                var thisIdx_Y = -1;
                this.splitY = -1;

                if (this.clickOnSelection) {
                    if (this.dragX != x || this.dragY != y) {
                        this.rowDrag = true;
                        this.dragX = x;
                        this.dragY = y;
                    }
                    if (this.rowDrag) {
                        if (thisIdx > -1 && thisIdx < list_dr.length) {
                            thisIdx_Y = this.y + thisIdx * this.rowHeight - scroll_;
                            this.splitY = y > thisIdx_Y + this.rowHeight / 2 ? thisIdx_Y + this.rowHeight : thisIdx_Y;
                        } else if (thisIdx == list_dr.length) {
                            this.splitY = this.y + this.totalHeight;
                        }
                    };
                    (this.splitY != tempY) && this.repaint();

                    // auto scroll
                    
                    if (this.rowDrag && this.hasScrollbar) {
                        // && !this.actionNowAllowed
                        if (y < this.y + this.rowHeight / 2) {
                            this.startScroll(1);
                        } else if (y > this.y + this.h - this.rowHeight / 2) {
                            this.startScroll(-1);
                        } else {
                            this.stopScroll();
                        }
                    }
                }
                break;
            case "up":
                // scrollbar ...

                if (this.scrolling) {
                    this.stopScroll();
                }

                if (this.clickOnSelection) {
                    if (this.rowDrag) {
                        if (thisIdx > -1 && thisIdx < list_dr.length) {

                            var selection = plman.GetPlaylistSelectedItems(this.activeList);
                            var delta, sel = [];
                            var targetIdx, thisIdx_Y;

                            thisIdx_Y = this.y + thisIdx * this.rowHeight - scroll_;
                            targetIdx = thisIdx + (y > thisIdx_Y + this.rowHeight / 2 ? 0: 1);
                            delta = targetIdx;

                            if (selection.Count >= 1) {
                                var add = 0;

                                for (var i = 0; i < list_dr.length; i++) {
                                    if (plman.IsPlaylistItemSelected(this.activeList, i)) {
                                        sel.push(i);
                                    }
                                }
                                for (var i = 0; i < sel.length; i++) {
                                    if (sel[i] > targetIdx)
                                        //add++;
                                        delta++;
                                    //else break;
                                } 
                                //delta += add;
                            } else {
                            }

                            //plman.MovePlaylistSelection(this.activeList, -list_dr.length);
                            if (thisIdx == this.focusIdx) {
                            } else {
                                if (this.focusIdx > thisIdx) {
                                    targetIdx = thisIdx + (y > thisIdx_Y + this.rowHeight / 2 ? 1: 2);
                                    plman.MovePlaylistSelection(this.activeList, this.focusIdx - targetIdx);
                                }
                            }

                        } else {

                        }

                    } else {
                        if (thisIdx > -1 && thisIdx < list_dr.length) {
                            plman.ClearPlaylistSelection(this.activeList);
                            plman.SetPlaylistSelectionSingle(this.activeList, thisIdx, true);
                            plman.SetPlaylistFocusItem(this.activeList, thisIdx);
                        }
                    }
                }
                this.clickOnSelection = false;
                this.rowDrag = false;
                this.splitY = -1;
                this.repaint();
                window.SetCursor(32512);
                break;
            case "right":
                break;
            case "wheel":
                scroll -= mask * this.rowHeight * 3;
                break;
            case "leave":
                this.rowDrag = false;
                this.clickOnSelection = false;
                break;
            default:
                break;
        }

    }

    var __timer__ = {};

    this.startScroll = function(delta, func) {
        if (this.scrolling) return;
        __timer__.timeout = window.SetTimeout(function() {
            __timer__.interval = window.SetInterval(function() {
                __this__.onMouse("wheel", 0, 0, delta/3);
                if (scroll <= 0 || scroll + __this__.h >= __this__.totalHeight) {
                    __this__.stopScroll();
                }
            }, 100);
        }, 350);
        this.scrolling = true;
    }

    this.stopScroll = function() {
        __timer__.timeout && window.ClearTimeout(__timer__.timeout);
        __timer__.timeout = undefined;
        __timer__.interval && window.ClearInterval(__timer__.interval);
        __timer__.interval = undefined;
        this.scrolling = false;
    }


    window.SetTimeout(function() {
        //list = plman.GetPlaylistItems(plman.ActivePlaylist);
        scroll = 0;
        __this__.getList();
    }, 100);


}();


toolbar = new function() {

    var __buttons__ = {};
    var buttons = {};

    this.mode = 0; // 0: horizontal, 1: vertical

    (this.getBtns = function() {
        __buttons__ = {
            hamburg: new Button(function () {
            }),
            loupe: new Button(function() {
            }),
            artist: new Button(function () {
            }),
            album: new Button(function () {
            }),
            playlist: new Button(function() {
            }),
            cog: new Button(function () {
            })
        };
    })();

    this.repaint = function () {
        repaint_f1 = repaint_f2;
    }

    this.setSize = function (x, y, w, h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        if (this.mode == 1) {
            this.h = this.h < 350 ? 350 : this.h;
        }
    }

    this.draw = function(gr, font, color) {
        //var color = prop.Color;
        //var font = prop.Font;
        gr.FillSolidRect(this.x, this.y, this.w, this.h, setAlpha(color.txt, 13));

        if (this.mode == 0) {
            buttons = {
                hamburg: __buttons__.hamburg,
                loupe: __buttons__.loupe,
                cog: __buttons__.cog
            };
            var tabs = ["列表", "媒体库", "正在播放"];
            var bw = toolbar_height;

            buttons.hamburg.draw(gr, images.hamburg, this.x+10, this.y, bw, bw);

            var tx = buttons.hamburg.x+55, tw = 0, gap = 33;
            for (var i = 0; i < tabs.length; i++) {
                tw = gr.CalcTextWidth(tabs[i], font.tab);
                gr.GdiDrawText(tabs[i], font.tab, color.txt, tx, this.y, tw, this.h, DT_VCENTER | DT_CALCRECT);
                tx += tw + gap;
            }

            buttons.loupe.draw(gr, images.loupe, this.x+this.w - 100, this.y, bw, bw);
            buttons.cog.draw(gr, images.cog, this.x+this.w-57, this.y, bw, bw);

        } else if (this.mode == 1) {
            
            buttons = {
                hamburg: __buttons__.hamburg,
                loupe: __buttons__.loupe,
                playlist: __buttons__.playlist,
                playlist2: __buttons__.playlist,
                cog: __buttons__.cog,
            };

            var by = this.y + 10,
                bw = toolbar_width;
            buttons.hamburg.draw(gr, images.hamburg, this.x, by, bw, bw);
            by += toolbar_height;
            buttons.loupe.draw(gr, images.loupe, this.x, by, bw, bw);
            by += toolbar_height;
            buttons.playlist.draw(gr, images.playlist, this.x, by, bw, bw);
            by += toolbar_height;
            buttons.playlist2.draw(gr, images.playlist, this.x, by, bw, bw);

            by = this.y + this.h - bw;
            buttons.cog.draw(gr, images.cog, this.x, by, bw, bw);

        }
    }

}();


function getImages() {
    var g, w, img = null;
    var font_i = gdi.Font("segoe mdl2 assets", 18),
        font_i2 = gdi.Font("segoe mdl2 assets", 16);
    var color = prop.Color;
    var sf = StringFormat(1, 1);

    var createImage = function(obj, font, w, h) {
        for (var i in obj) {
            img = gdi.CreateImage(w, h);
            g = img.GetGraphics();
            g.SetTextRenderingHint(3);
            g.DrawString(obj[i], font, color.txt, 0, 0, w, h, sf);
            g.SetTextRenderingHint(0);
            images[i] && images[i].Dispose();
            images[i] = img;
        }
    };

    var icos = {
        "hamburg": "\ue700",
    },
    icos2 = {
        "loupe": "\ue094",
        "artist": "\ue13d",
        "album": "\ue958",
        "playlist": "\ue1a2",
        "cog": "\ue115"
    };

    w = toolbar_height;
    createImage(icos, font_i, w, w);
    createImage(icos2, font_i2, w, w);

    font_i.Dispose();
    font_i2.Dispose();
}


//////////////////////////////////////////////////////////////////////////////

var tmp_out;

function on_size() {
    ww = window.Width;
    wh = window.Height;

    ww = ww < 320 ? 320 : ww;

    //plst.setSize(0, header_height, ww, wh - header_height);
    if (ww < 800) {
        toolbar.mode = 0;
        toolbar.setSize(0, 0, ww, toolbar_height);
    } else {
        toolbar.mode = 1;
        toolbar.setSize(0, 0, toolbar_width, wh);
    }

    if (toolbar.mode == 0) {
        plst.setSize(0, header_height+toolbar_height, ww, wh - header_height-toolbar_height);
    } else if (toolbar.mode == 1) {
        plst.setSize(toolbar_width, header_height, ww - toolbar_width, wh - header_height);
    }

    repaint_main1 = repaint_main2;
    repaint_f1 = repaint_f2;

    tmp_out && window.ClearInterval(tmp_out);
    tmp_out = window.SetInterval(function() {
        if (window.IsVisible) {
            repaint_main1 = repaint_main2;
            repaint_f1 = repaint_f2;
            tmp_out && window.ClearInterval(tmp_out);
        }
    }, 500);
};


function on_paint(gr) {

    var font = prop.Font,
        color = prop.Color;

    if (!repaint_main && !repaint_f) {
        repaint_main = repaint_f = true;
    }

    if (repaint_main) {
        repaint_main = false;
        //gr.FillSolidRect(0, header_height, ww, wh - header_height, 0x2000aabb);
        plst.draw(gr);

        var leftPad = toolbar.mode ? toolbar_width : 0,
            topPad = toolbar.mode ? 0 : toolbar_height;

        gr.GdiDrawText(plman.GetPlaylistName(plst.activeList), font.header1, color.txt, leftPad + 30, topPad+20, ww - leftPad-30, 65, DT_END_ELLIPSIS);

        var tw = gr.CalcTextWidth("groupby ^", font.list);
        gr.GdiDrawText("groupby ^", font.list, color.txt, leftPad+30, topPad+75, ww, 35, 0);
        var tw2 = gr.CalcTextWidth("sortby ^", font.list);
        gr.GdiDrawText("sortby ^", font.list, color.txt, leftPad+30+tw+35, topPad+75, ww, 35, 0);
        gr.GdiDrawText("xxx items", font.list, blendColors(font.txt, font.bg, 0.5), leftPad+30+tw+35+tw2+35, topPad+75, ww, 35, 0);
    }

    if (repaint_f) {
        repaint_f = false;
        //gr.FillSolidRect(0, 0, ww, header_height, 0x50000000);
        toolbar.draw(gr, prop.Font, prop.Color);
        //
    }

    //gr.FillSolidRect(0, 0, ww, wh, setAlpha(color.txt, 150));
}

function on_timer__() {

    var d = new Date();
    if (d.getTime() - time222 < prop.Panel.refreshInterval - 1)
        return;
    else
        time222 = d.getTime();

    var repaint_1 = repaint_2 = false;

    if (repaint_f1 == repaint_f2) {
        repaint_f2 = !repaint_f1;
        repaint_1 = true;
    }
    if (repaint_main1 == repaint_main2) {
        repaint_main2 = !repaint_main1;
        repaint_2 = true;
    }


    var repaint_list = plst.onTimer();
    repaint_2 = repaint_2 || repaint_list;


    if (repaint_1 && repaint_2) {
        repaint_main = repaint_f = true;
        //fb.trace('full repaint');
        window.Repaint();
    } else {
        if (repaint_1) {
            repaint_f = true;
            //fb.trace('repaint 1');
            if (toolbar.mode == 0) {
                window.RepaintRect(0, 0, ww, toolbar_height);
            } else {
                window.RepaintRect(0, 0, toolbar_width, wh);
            }
        } else if (repaint_2) {
            repaint_main = true;
            //fb.trace('repaint 2');
            if (toolbar.mode == 0) {
                window.RepaintRect(0, toolbar_height, ww, wh - toolbar_height);
            } else {
                window.RepaintRect(toolbar_width, 0, ww - toolbar_width, wh);
            }
        }
    }
}

function on_mouse_wheel(step) {
    repaint_main1 = repaint_main2;
    //plst.onMouseWheel(step);
    plst.onMouse("wheel", 0, 0, step);
}

function on_mouse_lbtn_down(x, y, mask) {

    plst.onMouse("down", x, y, mask);

}

function on_mouse_lbtn_dblclk(x, y, mask) {

    plst.onMouse("dblclk", x, y, mask);

}

function on_mouse_move(x, y) {

    plst.onMouse("move", x, y);

}

function on_mouse_lbtn_up( x, y, mask) {

    plst.onMouse("up", x, y, mask);

}

function on_mouse_rbtn_up(x, y, mask) {

    plst.onMouse("right", x, y, mask);

}

function on_playback_new_track(metadb){
    plst.showNowPlaying = true;
    plst.repaint();
}

function on_playback_pause(state) {
    plst.repaint();
}

function on_playback_edited(metadb) {
    plst.repaint();
}

function on_playback_stop(reason) {
    plst.repaint();
}

function on_playback_queue_changed() {
    plst.repaint();
}


function on_playlist_switch() {
    plst.activeList = plman.ActivePlaylist;
    plst.getList();
    repaint_f1 = repaint_f2;

    utils.PlaySound(fb.ProfilePath + "se_plst00.wav", 0);
    if (plman.PlayingPlaylist == plman.ActivePlaylist) {
        plst.showNowPlaying = true;
    }
}

function on_playlists_changed() {
    plst.getList();
}

function on_playlist_items_reordered(playlist) {
    if (playlist != plman.ActivePlaylist)
        return;
    plst.getList();
}

function on_playlist_items_removed(playlist) {
    on_playlist_items_reordered(playlist);
}

function on_playlist_items_added(playlist) {
    on_playlist_items_reordered(playlist);
}

function on_playlist_items_selection_change() {
    plst.repaint();
}

function on_selection_changed() {
    plst.repaint();
}


function on_item_focus_change(playlist, from, to) {
    plst.focusIdx = plman.GetPlaylistFocusItemIndex(plst.activeList);
    plst.repaint();
};

function on_drag_drop(action, x, y, mask) {
    var idx;
    if (!fb.PlaylistCount) {
        idx = plman.CreatePlaylist(0, "Default");
        plman.ActivePlaylist = 0;
    } else {
        plman.ClearPlaylistSelection(active_list);
        idx = active_list;
    }
    if (idx != undefined) {
        action.ToPlaylist();
        action.Playlist = idx;
        action.ToSelect = true;
    }
}


function on_notify_data(name, info) {

    // ...

}




getColor();
getFont();
getImages();

window.SetInterval(on_timer__, prop.Panel.refreshInterval);




// vim: set ft=javascript fileencoding=utf-8 bomb sw=4 ts=4 et:
